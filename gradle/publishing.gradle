/*
 * Copyright 2022 Grabtaxi Holdings PTE LTD (GRAB)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "org.jetbrains.dokka"


task sourcesJar(type: Jar) {
    group = "publishing"
    archiveClassifier.set("sources")
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    group = "publishing"
    archiveClassifier.set("javadoc")
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    publishing {
        publications {
            // Gradle plugin marker if it exists
            if (plugins.hasPlugin('java-gradle-plugin')) {
                named("appSizerPluginPluginMarkerMaven") { publication ->
                    configurePom(publication)
                }
            }

            release(MavenPublication) { publication ->
                groupId project.group
                artifactId project.findProperty("artifactId")
                version project.version

                from components.java

                artifact sourcesJar
                artifact javadocJar

                configurePom(publication)
            }
        }
    }
}

private void configurePom(MavenPublication publication) {
    publication.pom {
        name = project.name
        description = 'A tool designed to analyze the download size of Android applications'
        url = 'https://github.com/grab/app-sizer'
        licenses {
            license {
                name = 'MIT License'
                url = 'https://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }
        developers {
            developer {
                id = "MinhNguyen-nvm"
                name = "Minh Nguyen"
                email = "minhnguyen.gtvt@gmail.com"
            }
            developer {
                id = "arunkumar9t2"
                name = "Arunkumar"
                email = "hi@arunkumar.dev"
            }
            developer {
                id = "minkuan88"
                name = "Min Kuan Lim"
                email = "minkuan88@hotmail.com"
            }
        }
        scm {
            connection = "git@github.com:grab/app-size.git"
            developerConnection = "git@github.com:grab/app-size.git"
            url = 'https://github.com/grab/app-sizer'
        }
    }
}

afterEvaluate {
    signing {
        def signingKey = project.findProperty('signingKey') ?: System.getenv('GPG_PRIVATE_KEY')
        def signingPassword = project.findProperty('signingPassword') ?: System.getenv('GPG_PASSPHRASE')
        def signingKeyId = project.findProperty('signingKeyId') ?: System.getenv('GPG_KEY_ID')

        useInMemoryPgpKeys(
                signingKeyId,
                signingKey,
                signingPassword
        )
        sign publishing.publications
    }


    tasks.withType(Sign).configureEach { signTask ->
        signTask.onlyIf { !project.version.endsWith('SNAPSHOT') }
    }

}
